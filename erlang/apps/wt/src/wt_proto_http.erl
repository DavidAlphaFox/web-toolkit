%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.3.3
-module(wt_proto_http).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_Request.Schemes'/1, 'enum_value_by_symbol_Request.Schemes'/1]).
-export(['enum_symbol_by_value_Request.Methods'/1, 'enum_value_by_symbol_Request.Methods'/1]).
-export(['enum_symbol_by_value_Request.Versions'/1, 'enum_value_by_symbol_Request.Versions'/1]).
-export(['enum_symbol_by_value_Response.Types'/1, 'enum_value_by_symbol_Response.Types'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("wt_proto_http.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'Request.Schemes'() :: 'HTTP' | 'HTTPS'.
-type 'Request.Methods'() :: 'GET' | 'HEAD' | 'OPTIONS' | 'PUT' | 'POST' | 'DELETE'.
-type 'Request.Versions'() :: 'HTTP_1_0' | 'HTTP_1_1' | 'HTTP_2'.
-type 'Response.Types'() :: 'REPLY' | 'STREAM' | 'SENDFILE'.
-export_type(['Request.Schemes'/0, 'Request.Methods'/0, 'Request.Versions'/0, 'Response.Types'/0]).

%% message types
-type 'Request'() :: #'Request'{}.

-type 'Response'() :: #'Response'{}.

-export_type(['Request'/0, 'Response'/0]).

-record('map<string,string>',{key, value}).
-spec encode_msg(#'Request'{} | #'Response'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'Request'{} | #'Response'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'Request'{} | #'Response'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Request' ->
	  e_msg_Request(id(Msg, TrUserData), TrUserData);
      'Response' ->
	  e_msg_Response(id(Msg, TrUserData), TrUserData)
    end.


e_msg_Request(Msg, TrUserData) ->
    e_msg_Request(Msg, <<>>, TrUserData).


e_msg_Request(#'Request'{local_address = F1,
			 local_port = F2, remote_address = F3, remote_port = F4,
			 scheme = F5, method = F6, path = F7, query = F8,
			 version = F9, headers = F10, body = F11},
	      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 'HTTP'; TrF5 =:= 0 -> B4;
		     true ->
			 'e_enum_Request.Schemes'(TrF5, <<B4/binary, 40>>,
						  'MaybeTrUserData')
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 'GET'; TrF6 =:= 0 -> B5;
		     true ->
			 'e_enum_Request.Methods'(TrF6, <<B5/binary, 48>>,
						  'MaybeTrUserData')
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  case is_empty_string(TrF7) of
		    true -> B6;
		    false ->
			e_type_string(TrF7, <<B6/binary, 58>>, TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  case is_empty_string(TrF8) of
		    true -> B7;
		    false ->
			e_type_string(TrF8, <<B7/binary, 66>>, TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 'HTTP_1_0'; TrF9 =:= 0 -> B8;
		     true ->
			 'e_enum_Request.Versions'(TrF9, <<B8/binary, 72>>,
						   'MaybeTrUserData')
		  end
		end
	 end,
    B10 = begin
	    TrF10 = id(F10, TrUserData),
	    if TrF10 == [] -> B9;
	       true -> e_field_Request_headers(TrF10, B9, TrUserData)
	    end
	  end,
    if F11 == undefined -> B10;
       true ->
	   begin
	     TrF11 = id(F11, TrUserData),
	     case iolist_size(TrF11) of
	       0 -> B10;
	       _ -> e_type_bytes(TrF11, <<B10/binary, 90>>, TrUserData)
	     end
	   end
    end.

e_msg_Response(Msg, TrUserData) ->
    e_msg_Response(Msg, <<>>, TrUserData).


e_msg_Response(#'Response'{type = F1, code = F2,
			   headers = F3, body = F4, path = F5},
	       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'REPLY'; TrF1 =:= 0 -> Bin;
		     true ->
			 'e_enum_Response.Types'(TrF1, <<Bin/binary, 8>>,
						 'MaybeTrUserData')
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true -> e_field_Response_headers(TrF3, B2, TrUserData)
	   end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case iolist_size(TrF4) of
		    0 -> B3;
		    _ -> e_type_bytes(TrF4, <<B3/binary, 34>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     case is_empty_string(TrF5) of
	       true -> B4;
	       false ->
		   e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
	     end
	   end
    end.

e_mfield_Request_headers(Msg, Bin, TrUserData) ->
    SubBin = 'e_msg_map<string,string>'(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Request_headers([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 =
	e_mfield_Request_headers('tr_encode_Request.headers[x]'(Elem,
								TrUserData),
				 Bin2, TrUserData),
    e_field_Request_headers(Rest, Bin3, TrUserData);
e_field_Request_headers([], Bin, _TrUserData) -> Bin.

e_mfield_Response_headers(Msg, Bin, TrUserData) ->
    SubBin = 'e_msg_map<string,string>'(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Response_headers([Elem | Rest], Bin,
			 TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
	e_mfield_Response_headers('tr_encode_Response.headers[x]'(Elem,
								  TrUserData),
				  Bin2, TrUserData),
    e_field_Response_headers(Rest, Bin3, TrUserData);
e_field_Response_headers([], Bin, _TrUserData) -> Bin.

'e_msg_map<string,string>'(#'map<string,string>'{key =
						     F1,
						 value = F2},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

'e_enum_Request.Schemes'('HTTP', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_Request.Schemes'('HTTPS', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Request.Schemes'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_Request.Methods'('GET', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_Request.Methods'('HEAD', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Request.Methods'('OPTIONS', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_Request.Methods'('PUT', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_Request.Methods'('POST', Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_Request.Methods'('DELETE', Bin, _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_Request.Methods'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_Request.Versions'('HTTP_1_0', Bin,
			  _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_Request.Versions'('HTTP_1_1', Bin,
			  _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Request.Versions'('HTTP_2', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_Request.Versions'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_Response.Types'('REPLY', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_Response.Types'('STREAM', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Response.Types'('SENDFILE', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_Response.Types'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
-ifdef('GPB_PATTERN_STACK').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

-endif.

decode_msg_2_doit('Request', Bin, TrUserData) ->
    id(d_msg_Request(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Response', Bin, TrUserData) ->
    id(d_msg_Response(Bin, TrUserData), TrUserData).



d_msg_Request(Bin, TrUserData) ->
    dfp_read_field_def_Request(Bin, 0, 0,
			       id([], TrUserData), id(0, TrUserData),
			       id([], TrUserData), id(0, TrUserData),
			       id('HTTP', TrUserData), id('GET', TrUserData),
			       id([], TrUserData), id([], TrUserData),
			       id('HTTP_1_0', TrUserData),
			       'tr_decode_init_default_Request.headers'([],
									TrUserData),
			       id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_Request(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_Request_local_address(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, TrUserData);
dfp_read_field_def_Request(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_Request_local_port(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, TrUserData);
dfp_read_field_def_Request(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_Request_remote_address(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, TrUserData);
dfp_read_field_def_Request(<<32, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_Request_remote_port(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, TrUserData);
dfp_read_field_def_Request(<<40, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_Request_scheme(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   TrUserData);
dfp_read_field_def_Request(<<48, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_Request_method(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   TrUserData);
dfp_read_field_def_Request(<<58, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_Request_path(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 TrUserData);
dfp_read_field_def_Request(<<66, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_Request_query(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  TrUserData);
dfp_read_field_def_Request(<<72, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_Request_version(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    TrUserData);
dfp_read_field_def_Request(<<82, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_Request_headers(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    TrUserData);
dfp_read_field_def_Request(<<90, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_Request_body(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 TrUserData);
dfp_read_field_def_Request(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, R1, F@_11,
			   TrUserData) ->
    #'Request'{local_address = F@_1, local_port = F@_2,
	       remote_address = F@_3, remote_port = F@_4,
	       scheme = F@_5, method = F@_6, path = F@_7, query = F@_8,
	       version = F@_9,
	       headers =
		   'tr_decode_repeated_finalize_Request.headers'(R1,
								 TrUserData),
	       body = F@_11};
dfp_read_field_def_Request(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			   F@_11, TrUserData) ->
    dg_read_field_def_Request(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

dg_read_field_def_Request(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Request(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, TrUserData);
dg_read_field_def_Request(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Request_local_address(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, TrUserData);
      16 ->
	  d_field_Request_local_port(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, TrUserData);
      26 ->
	  d_field_Request_remote_address(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, F@_11, TrUserData);
      32 ->
	  d_field_Request_remote_port(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, F@_11, TrUserData);
      40 ->
	  d_field_Request_scheme(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, TrUserData);
      48 ->
	  d_field_Request_method(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, TrUserData);
      58 ->
	  d_field_Request_path(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       TrUserData);
      66 ->
	  d_field_Request_query(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, TrUserData);
      72 ->
	  d_field_Request_version(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, TrUserData);
      82 ->
	  d_field_Request_headers(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, TrUserData);
      90 ->
	  d_field_Request_body(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Request(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData);
	    1 ->
		skip_64_Request(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				TrUserData);
	    2 ->
		skip_length_delimited_Request(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6, F@_7,
					      F@_8, F@_9, F@_10, F@_11,
					      TrUserData);
	    3 ->
		skip_group_Request(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, TrUserData);
	    5 ->
		skip_32_Request(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				TrUserData)
	  end
    end;
dg_read_field_def_Request(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, R1, F@_11,
			  TrUserData) ->
    #'Request'{local_address = F@_1, local_port = F@_2,
	       remote_address = F@_3, remote_port = F@_4,
	       scheme = F@_5, method = F@_6, path = F@_7, query = F@_8,
	       version = F@_9,
	       headers =
		   'tr_decode_repeated_finalize_Request.headers'(R1,
								 TrUserData),
	       body = F@_11}.

d_field_Request_local_address(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_Request_local_address(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				  TrUserData);
d_field_Request_local_address(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, TrUserData).

d_field_Request_local_port(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_Request_local_port(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, TrUserData);
d_field_Request_local_port(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Request(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, TrUserData).

d_field_Request_remote_address(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_Request_remote_address(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				   TrUserData);
d_field_Request_remote_address(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       F@_10, F@_11, TrUserData).

d_field_Request_remote_port(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_Request_remote_port(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, F@_11, TrUserData);
d_field_Request_remote_port(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Request(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9,
			       F@_10, F@_11, TrUserData).

d_field_Request_scheme(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_Request_scheme(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData);
d_field_Request_scheme(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9,
		       F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_Request.Schemes'(begin
							<<Res:32/signed-native>> =
							    <<(X bsl N +
								 Acc):32/unsigned-native>>,
							id(Res, TrUserData)
						      end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_Request(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9,
			       F@_10, F@_11, TrUserData).

d_field_Request_method(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_Request_method(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData);
d_field_Request_method(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9,
		       F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_Request.Methods'(begin
							<<Res:32/signed-native>> =
							    <<(X bsl N +
								 Acc):32/unsigned-native>>,
							id(Res, TrUserData)
						      end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_Request(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9,
			       F@_10, F@_11, TrUserData).

d_field_Request_path(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_Request_path(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, TrUserData);
d_field_Request_path(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9,
		     F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9,
			       F@_10, F@_11, TrUserData).

d_field_Request_query(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_Request_query(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, TrUserData);
d_field_Request_query(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9,
		      F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9,
			       F@_10, F@_11, TrUserData).

d_field_Request_version(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_Request_version(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, TrUserData);
d_field_Request_version(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _,
			F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_Request.Versions'(begin
							 <<Res:32/signed-native>> =
							     <<(X bsl N +
								  Acc):32/unsigned-native>>,
							 id(Res, TrUserData)
						       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_Request(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue,
			       F@_10, F@_11, TrUserData).

d_field_Request_headers(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_Request_headers(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, TrUserData);
d_field_Request_headers(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, Prev, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       'tr_decode_repeated_add_elem_Request.headers'(NewFValue,
									     Prev,
									     TrUserData),
			       F@_11, TrUserData).

d_field_Request_body(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_Request_body(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, TrUserData);
d_field_Request_body(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       NewFValue, TrUserData).

skip_varint_Request(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    skip_varint_Request(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
skip_varint_Request(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, TrUserData).

skip_length_delimited_Request(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    skip_length_delimited_Request(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				  TrUserData);
skip_length_delimited_Request(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Request(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, TrUserData).

skip_group_Request(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Request(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, TrUserData).

skip_32_Request(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		F@_11, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, TrUserData).

skip_64_Request(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		F@_11, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, TrUserData).

d_msg_Response(Bin, TrUserData) ->
    dfp_read_field_def_Response(Bin, 0, 0,
				id('REPLY', TrUserData), id(0, TrUserData),
				'tr_decode_init_default_Response.headers'([],
									  TrUserData),
				id(<<>>, TrUserData), id([], TrUserData),
				TrUserData).

dfp_read_field_def_Response(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Response_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_Response(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Response_code(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_Response(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Response_headers(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_Response(<<34, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Response_body(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_Response(<<42, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Response_path(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_Response(<<>>, 0, 0, F@_1, F@_2, R1,
			    F@_4, F@_5, TrUserData) ->
    #'Response'{type = F@_1, code = F@_2,
		headers =
		    'tr_decode_repeated_finalize_Response.headers'(R1,
								   TrUserData),
		body = F@_4, path = F@_5};
dfp_read_field_def_Response(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_Response(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_Response(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Response(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_Response(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Response_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      16 ->
	  d_field_Response_code(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      26 ->
	  d_field_Response_headers(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      34 ->
	  d_field_Response_body(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      42 ->
	  d_field_Response_path(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Response(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
	    1 ->
		skip_64_Response(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData);
	    2 ->
		skip_length_delimited_Response(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_Response(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_Response(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData)
	  end
    end;
dg_read_field_def_Response(<<>>, 0, 0, F@_1, F@_2, R1,
			   F@_4, F@_5, TrUserData) ->
    #'Response'{type = F@_1, code = F@_2,
		headers =
		    'tr_decode_repeated_finalize_Response.headers'(R1,
								   TrUserData),
		body = F@_4, path = F@_5}.

d_field_Response_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Response_type(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Response_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_Response.Types'(begin
						       <<Res:32/signed-native>> =
							   <<(X bsl N +
								Acc):32/unsigned-native>>,
						       id(Res, TrUserData)
						     end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_Response(RestF, 0, 0, NewFValue,
				F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_Response_code(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Response_code(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Response_code(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Response(RestF, 0, 0, F@_1,
				NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_Response_headers(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Response_headers(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Response_headers(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0, F@_1, F@_2,
				'tr_decode_repeated_add_elem_Response.headers'(NewFValue,
									       Prev,
									       TrUserData),
				F@_4, F@_5, TrUserData).

d_field_Response_body(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Response_body(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Response_body(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0, F@_1, F@_2,
				F@_3, NewFValue, F@_5, TrUserData).

d_field_Response_path(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Response_path(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Response_path(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, NewFValue, TrUserData).

skip_varint_Response(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_Response(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
skip_varint_Response(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_Response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_Response(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
skip_length_delimited_Response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Response(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_group_Response(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Response(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_32_Response(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_64_Response(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

'd_msg_map<string,string>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Bin, 0, 0,
					    id([], TrUserData),
					    id([], TrUserData), TrUserData).

'dfp_read_field_def_map<string,string>'(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_key'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_value'(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #'map<string,string>'{key = F@_1, value = F@_2};
'dfp_read_field_def_map<string,string>'(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,string>'(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,string>'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,string>'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
'dg_read_field_def_map<string,string>'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,string>_key'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      18 ->
	  'd_field_map<string,string>_value'(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		'skip_64_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		'skip_length_delimited_map<string,string>'(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		'skip_group_map<string,string>'(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
'dg_read_field_def_map<string,string>'(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #'map<string,string>'{key = F@_1, value = F@_2}.

'd_field_map<string,string>_key'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,string>_key'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_key'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

'd_field_map<string,string>_value'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,string>_value'(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_value'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

'skip_varint_map<string,string>'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,string>'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'skip_varint_map<string,string>'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,string>'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,string>'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
'skip_length_delimited_map<string,string>'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,string>'(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

'skip_group_map<string,string>'(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,string>'(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

'skip_32_map<string,string>'(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_64_map<string,string>'(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'd_enum_Request.Schemes'(0) -> 'HTTP';
'd_enum_Request.Schemes'(1) -> 'HTTPS';
'd_enum_Request.Schemes'(V) -> V.

'd_enum_Request.Methods'(0) -> 'GET';
'd_enum_Request.Methods'(1) -> 'HEAD';
'd_enum_Request.Methods'(2) -> 'OPTIONS';
'd_enum_Request.Methods'(3) -> 'PUT';
'd_enum_Request.Methods'(4) -> 'POST';
'd_enum_Request.Methods'(5) -> 'DELETE';
'd_enum_Request.Methods'(V) -> V.

'd_enum_Request.Versions'(0) -> 'HTTP_1_0';
'd_enum_Request.Versions'(1) -> 'HTTP_1_1';
'd_enum_Request.Versions'(2) -> 'HTTP_2';
'd_enum_Request.Versions'(V) -> V.

'd_enum_Response.Types'(0) -> 'REPLY';
'd_enum_Response.Types'(1) -> 'STREAM';
'd_enum_Response.Types'(2) -> 'SENDFILE';
'd_enum_Response.Types'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Request' -> merge_msg_Request(Prev, New, TrUserData);
      'Response' -> merge_msg_Response(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Request/3}).
merge_msg_Request(#'Request'{local_address =
				 PFlocal_address,
			     local_port = PFlocal_port,
			     remote_address = PFremote_address,
			     remote_port = PFremote_port, scheme = PFscheme,
			     method = PFmethod, path = PFpath, query = PFquery,
			     version = PFversion, headers = PFheaders,
			     body = PFbody},
		  #'Request'{local_address = NFlocal_address,
			     local_port = NFlocal_port,
			     remote_address = NFremote_address,
			     remote_port = NFremote_port, scheme = NFscheme,
			     method = NFmethod, path = NFpath, query = NFquery,
			     version = NFversion, headers = NFheaders,
			     body = NFbody},
		  TrUserData) ->
    #'Request'{local_address =
		   if NFlocal_address =:= undefined -> PFlocal_address;
		      true -> NFlocal_address
		   end,
	       local_port =
		   if NFlocal_port =:= undefined -> PFlocal_port;
		      true -> NFlocal_port
		   end,
	       remote_address =
		   if NFremote_address =:= undefined -> PFremote_address;
		      true -> NFremote_address
		   end,
	       remote_port =
		   if NFremote_port =:= undefined -> PFremote_port;
		      true -> NFremote_port
		   end,
	       scheme =
		   if NFscheme =:= undefined -> PFscheme;
		      true -> NFscheme
		   end,
	       method =
		   if NFmethod =:= undefined -> PFmethod;
		      true -> NFmethod
		   end,
	       path =
		   if NFpath =:= undefined -> PFpath;
		      true -> NFpath
		   end,
	       query =
		   if NFquery =:= undefined -> PFquery;
		      true -> NFquery
		   end,
	       version =
		   if NFversion =:= undefined -> PFversion;
		      true -> NFversion
		   end,
	       headers =
		   if PFheaders /= undefined, NFheaders /= undefined ->
			  'tr_merge_Request.headers'(PFheaders, NFheaders,
						     TrUserData);
		      PFheaders == undefined -> NFheaders;
		      NFheaders == undefined -> PFheaders
		   end,
	       body =
		   if NFbody =:= undefined -> PFbody;
		      true -> NFbody
		   end}.

-compile({nowarn_unused_function,merge_msg_Response/3}).
merge_msg_Response(#'Response'{type = PFtype,
			       code = PFcode, headers = PFheaders,
			       body = PFbody, path = PFpath},
		   #'Response'{type = NFtype, code = NFcode,
			       headers = NFheaders, body = NFbody,
			       path = NFpath},
		   TrUserData) ->
    #'Response'{type =
		    if NFtype =:= undefined -> PFtype;
		       true -> NFtype
		    end,
		code =
		    if NFcode =:= undefined -> PFcode;
		       true -> NFcode
		    end,
		headers =
		    if PFheaders /= undefined, NFheaders /= undefined ->
			   'tr_merge_Response.headers'(PFheaders, NFheaders,
						       TrUserData);
		       PFheaders == undefined -> NFheaders;
		       NFheaders == undefined -> PFheaders
		    end,
		body =
		    if NFbody =:= undefined -> PFbody;
		       true -> NFbody
		    end,
		path =
		    if NFpath =:= undefined -> PFpath;
		       true -> NFpath
		    end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Request' -> v_msg_Request(Msg, [MsgName], TrUserData);
      'Response' ->
	  v_msg_Response(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Request/3}).
-dialyzer({nowarn_function,v_msg_Request/3}).
v_msg_Request(#'Request'{local_address = F1,
			 local_port = F2, remote_address = F3, remote_port = F4,
			 scheme = F5, method = F6, path = F7, query = F8,
			 version = F9, headers = F10, body = F11},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [local_address | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_uint32(F2, [local_port | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [remote_address | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_uint32(F4, [remote_port | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_enum_Request.Schemes'(F5, [scheme | Path],
				    TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_enum_Request.Methods'(F6, [method | Path],
				    TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [path | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_string(F8, [query | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true ->
	   'v_enum_Request.Versions'(F9, [version | Path],
				     TrUserData)
    end,
    'v_map<string,string>'(F10, [headers | Path],
			   TrUserData),
    if F11 == undefined -> ok;
       true -> v_type_bytes(F11, [body | Path], TrUserData)
    end,
    ok;
v_msg_Request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Request'}, X, Path).

-compile({nowarn_unused_function,v_msg_Response/3}).
-dialyzer({nowarn_function,v_msg_Response/3}).
v_msg_Response(#'Response'{type = F1, code = F2,
			   headers = F3, body = F4, path = F5},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_Response.Types'(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [code | Path], TrUserData)
    end,
    'v_map<string,string>'(F3, [headers | Path],
			   TrUserData),
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [body | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [path | Path], TrUserData)
    end,
    ok;
v_msg_Response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Response'}, X, Path).

-compile({nowarn_unused_function,'v_enum_Request.Schemes'/3}).
-dialyzer({nowarn_function,'v_enum_Request.Schemes'/3}).
'v_enum_Request.Schemes'('HTTP', _Path, _TrUserData) ->
    ok;
'v_enum_Request.Schemes'('HTTPS', _Path, _TrUserData) ->
    ok;
'v_enum_Request.Schemes'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Request.Schemes'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Request.Schemes'}, X,
		  Path).

-compile({nowarn_unused_function,'v_enum_Request.Methods'/3}).
-dialyzer({nowarn_function,'v_enum_Request.Methods'/3}).
'v_enum_Request.Methods'('GET', _Path, _TrUserData) ->
    ok;
'v_enum_Request.Methods'('HEAD', _Path, _TrUserData) ->
    ok;
'v_enum_Request.Methods'('OPTIONS', _Path,
			 _TrUserData) ->
    ok;
'v_enum_Request.Methods'('PUT', _Path, _TrUserData) ->
    ok;
'v_enum_Request.Methods'('POST', _Path, _TrUserData) ->
    ok;
'v_enum_Request.Methods'('DELETE', _Path,
			 _TrUserData) ->
    ok;
'v_enum_Request.Methods'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Request.Methods'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Request.Methods'}, X,
		  Path).

-compile({nowarn_unused_function,'v_enum_Request.Versions'/3}).
-dialyzer({nowarn_function,'v_enum_Request.Versions'/3}).
'v_enum_Request.Versions'('HTTP_1_0', _Path,
			  _TrUserData) ->
    ok;
'v_enum_Request.Versions'('HTTP_1_1', _Path,
			  _TrUserData) ->
    ok;
'v_enum_Request.Versions'('HTTP_2', _Path,
			  _TrUserData) ->
    ok;
'v_enum_Request.Versions'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Request.Versions'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Request.Versions'}, X,
		  Path).

-compile({nowarn_unused_function,'v_enum_Response.Types'/3}).
-dialyzer({nowarn_function,'v_enum_Response.Types'/3}).
'v_enum_Response.Types'('REPLY', _Path, _TrUserData) ->
    ok;
'v_enum_Response.Types'('STREAM', _Path, _TrUserData) ->
    ok;
'v_enum_Response.Types'('SENDFILE', _Path,
			_TrUserData) ->
    ok;
'v_enum_Response.Types'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Response.Types'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Response.Types'}, X,
		  Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,'v_map<string,string>'/3}).
-dialyzer({nowarn_function,'v_map<string,string>'/3}).
'v_map<string,string>'(KVs, Path, TrUserData)
    when is_list(KVs) ->
    [case X of
       {Key, Value} ->
	   v_type_string(Key, [key | Path], TrUserData),
	   v_type_string(Value, [value | Path], TrUserData);
       _ -> mk_type_error(invalid_key_value_tuple, X, Path)
     end
     || X <- KVs],
    ok;
'v_map<string,string>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_list_of_key_value_tuples, X,
		  Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_Response.headers'/2}).
'tr_decode_init_default_Response.headers'(_, _) ->
    mt_empty_map_r().

-compile({inline,'tr_merge_Response.headers'/3}).
'tr_merge_Response.headers'(X1, X2, _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_Response.headers'/2}).
'tr_decode_repeated_finalize_Response.headers'(L, _) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_Response.headers'/3}).
'tr_decode_repeated_add_elem_Response.headers'(Elem, L,
					       _) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_decode_init_default_Request.headers'/2}).
'tr_decode_init_default_Request.headers'(_, _) ->
    mt_empty_map_r().

-compile({inline,'tr_merge_Request.headers'/3}).
'tr_merge_Request.headers'(X1, X2, _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_Request.headers'/2}).
'tr_decode_repeated_finalize_Request.headers'(L, _) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_decode_repeated_add_elem_Request.headers'/3}).
'tr_decode_repeated_add_elem_Request.headers'(Elem, L,
					      _) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_encode_Response.headers[x]'/2}).
'tr_encode_Response.headers[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,'tr_encode_Request.headers[x]'/2}).
'tr_encode_Request.headers[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,string>').

-compile({inline,mt_maptuple_to_pseudomsg_r/2}).
mt_maptuple_to_pseudomsg_r({K, V}, RName) ->
    {RName, K, V}.


-compile({inline,mt_empty_map_r/0}).
mt_empty_map_r() -> dict:new().

-compile({inline,mt_add_item_r/2}).
mt_add_item_r({_RName, K, V}, D) -> dict:store(K, V, D).


-compile({inline,mt_finalize_items_r/1}).
mt_finalize_items_r(D) -> dict:to_list(D).


-compile({inline,mt_merge_maptuples_r/2}).
mt_merge_maptuples_r(L1, L2) ->
    dict:to_list(dict:merge(fun (_Key, _V1, V2) -> V2 end,
			    dict:from_list(L1), dict:from_list(L2))).



get_msg_defs() ->
    [{{enum, 'Request.Schemes'},
      [{'HTTP', 0}, {'HTTPS', 1}]},
     {{enum, 'Request.Methods'},
      [{'GET', 0}, {'HEAD', 1}, {'OPTIONS', 2}, {'PUT', 3},
       {'POST', 4}, {'DELETE', 5}]},
     {{enum, 'Request.Versions'},
      [{'HTTP_1_0', 0}, {'HTTP_1_1', 1}, {'HTTP_2', 2}]},
     {{enum, 'Response.Types'},
      [{'REPLY', 0}, {'STREAM', 1}, {'SENDFILE', 2}]},
     {{msg, 'Request'},
      [#field{name = local_address, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = local_port, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = remote_address, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = remote_port, fnum = 4, rnum = 5,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = scheme, fnum = 5, rnum = 6,
	      type = {enum, 'Request.Schemes'}, occurrence = optional,
	      opts = []},
       #field{name = method, fnum = 6, rnum = 7,
	      type = {enum, 'Request.Methods'}, occurrence = optional,
	      opts = []},
       #field{name = path, fnum = 7, rnum = 8, type = string,
	      occurrence = optional, opts = []},
       #field{name = query, fnum = 8, rnum = 9, type = string,
	      occurrence = optional, opts = []},
       #field{name = version, fnum = 9, rnum = 10,
	      type = {enum, 'Request.Versions'},
	      occurrence = optional, opts = []},
       #field{name = headers, fnum = 10, rnum = 11,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []},
       #field{name = body, fnum = 11, rnum = 12, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'Response'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'Response.Types'}, occurrence = optional,
	      opts = []},
       #field{name = code, fnum = 2, rnum = 3, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = headers, fnum = 3, rnum = 4,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []},
       #field{name = body, fnum = 4, rnum = 5, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = path, fnum = 5, rnum = 6, type = string,
	      occurrence = optional, opts = []}]}].


get_msg_names() -> ['Request', 'Response'].


get_group_names() -> [].


get_msg_or_group_names() -> ['Request', 'Response'].


get_enum_names() ->
    ['Request.Schemes', 'Request.Methods',
     'Request.Versions', 'Response.Types'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Request') ->
    [#field{name = local_address, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = local_port, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = remote_address, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = remote_port, fnum = 4, rnum = 5,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = scheme, fnum = 5, rnum = 6,
	    type = {enum, 'Request.Schemes'}, occurrence = optional,
	    opts = []},
     #field{name = method, fnum = 6, rnum = 7,
	    type = {enum, 'Request.Methods'}, occurrence = optional,
	    opts = []},
     #field{name = path, fnum = 7, rnum = 8, type = string,
	    occurrence = optional, opts = []},
     #field{name = query, fnum = 8, rnum = 9, type = string,
	    occurrence = optional, opts = []},
     #field{name = version, fnum = 9, rnum = 10,
	    type = {enum, 'Request.Versions'},
	    occurrence = optional, opts = []},
     #field{name = headers, fnum = 10, rnum = 11,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []},
     #field{name = body, fnum = 11, rnum = 12, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('Response') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'Response.Types'}, occurrence = optional,
	    opts = []},
     #field{name = code, fnum = 2, rnum = 3, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = headers, fnum = 3, rnum = 4,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []},
     #field{name = body, fnum = 4, rnum = 5, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = path, fnum = 5, rnum = 6, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('Request.Schemes') ->
    [{'HTTP', 0}, {'HTTPS', 1}];
find_enum_def('Request.Methods') ->
    [{'GET', 0}, {'HEAD', 1}, {'OPTIONS', 2}, {'PUT', 3},
     {'POST', 4}, {'DELETE', 5}];
find_enum_def('Request.Versions') ->
    [{'HTTP_1_0', 0}, {'HTTP_1_1', 1}, {'HTTP_2', 2}];
find_enum_def('Response.Types') ->
    [{'REPLY', 0}, {'STREAM', 1}, {'SENDFILE', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('Request.Schemes', Value) ->
    'enum_symbol_by_value_Request.Schemes'(Value);
enum_symbol_by_value('Request.Methods', Value) ->
    'enum_symbol_by_value_Request.Methods'(Value);
enum_symbol_by_value('Request.Versions', Value) ->
    'enum_symbol_by_value_Request.Versions'(Value);
enum_symbol_by_value('Response.Types', Value) ->
    'enum_symbol_by_value_Response.Types'(Value).


enum_value_by_symbol('Request.Schemes', Sym) ->
    'enum_value_by_symbol_Request.Schemes'(Sym);
enum_value_by_symbol('Request.Methods', Sym) ->
    'enum_value_by_symbol_Request.Methods'(Sym);
enum_value_by_symbol('Request.Versions', Sym) ->
    'enum_value_by_symbol_Request.Versions'(Sym);
enum_value_by_symbol('Response.Types', Sym) ->
    'enum_value_by_symbol_Response.Types'(Sym).


'enum_symbol_by_value_Request.Schemes'(0) -> 'HTTP';
'enum_symbol_by_value_Request.Schemes'(1) -> 'HTTPS'.


'enum_value_by_symbol_Request.Schemes'('HTTP') -> 0;
'enum_value_by_symbol_Request.Schemes'('HTTPS') -> 1.

'enum_symbol_by_value_Request.Methods'(0) -> 'GET';
'enum_symbol_by_value_Request.Methods'(1) -> 'HEAD';
'enum_symbol_by_value_Request.Methods'(2) -> 'OPTIONS';
'enum_symbol_by_value_Request.Methods'(3) -> 'PUT';
'enum_symbol_by_value_Request.Methods'(4) -> 'POST';
'enum_symbol_by_value_Request.Methods'(5) -> 'DELETE'.


'enum_value_by_symbol_Request.Methods'('GET') -> 0;
'enum_value_by_symbol_Request.Methods'('HEAD') -> 1;
'enum_value_by_symbol_Request.Methods'('OPTIONS') -> 2;
'enum_value_by_symbol_Request.Methods'('PUT') -> 3;
'enum_value_by_symbol_Request.Methods'('POST') -> 4;
'enum_value_by_symbol_Request.Methods'('DELETE') -> 5.

'enum_symbol_by_value_Request.Versions'(0) ->
    'HTTP_1_0';
'enum_symbol_by_value_Request.Versions'(1) ->
    'HTTP_1_1';
'enum_symbol_by_value_Request.Versions'(2) -> 'HTTP_2'.


'enum_value_by_symbol_Request.Versions'('HTTP_1_0') ->
    0;
'enum_value_by_symbol_Request.Versions'('HTTP_1_1') ->
    1;
'enum_value_by_symbol_Request.Versions'('HTTP_2') -> 2.

'enum_symbol_by_value_Response.Types'(0) -> 'REPLY';
'enum_symbol_by_value_Response.Types'(1) -> 'STREAM';
'enum_symbol_by_value_Response.Types'(2) -> 'SENDFILE'.


'enum_value_by_symbol_Response.Types'('REPLY') -> 0;
'enum_value_by_symbol_Response.Types'('STREAM') -> 1;
'enum_value_by_symbol_Response.Types'('SENDFILE') -> 2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'wt.proto.http'.



gpb_version_as_string() ->
    "4.3.3".

gpb_version_as_list() ->
    [4,3,3].
