(in-package :css)

;; https://drafts.csswg.org/css-box-3

(define-property margin-top ()
  ()
  (:value .length .percentage :auto))

(define-property margin-right ()
  ()
  (:value .length .percentage :auto))

(define-property margin-bottom ()
  ()
  (:value .length .percentage :auto))

(define-property margin-left ()
  ()
  (:value .length .percentage :auto))

(define-property margin ()
  ()
  (:value .margin))

(define-parser .margin ()
  (lambda (input)
    (multiple-value-bind (rest value match-p)
        (parse (.or (.seq (.or (.length) (.percentage) (.k :auto))
                          (.some (.whitespace))
                          (.or (.length) (.percentage) (.k :auto))
                          (.some (.whitespace))
                          (.or (.length) (.percentage) (.k :auto))
                          (.some (.whitespace))
                          (.or (.length) (.percentage) (.k :auto)))
                    (.seq (.or (.length) (.percentage) (.k :auto))
                          (.some (.whitespace))
                          (.or (.length) (.percentage) (.k :auto))
                          (.some (.whitespace))
                          (.or (.length) (.percentage) (.k :auto)))
                    (.seq (.or (.length) (.percentage) (.k :auto))
                          (.some (.whitespace))
                          (.or (.length) (.percentage) (.k :auto)))
                    (.seq (.or (.length) (.percentage) (.k :auto))))
               input)
      (if match-p
          (case (cl:length value)
            (1 (values rest value t))
            (3 (values rest `(,(first value) ,(third value)) t))
            (5 (values rest `(,(first value) ,(third value) ,(fifth value)) t))
            (7 (values rest `(,(first value) ,(third value) ,(fifth value) ,(seventh value)) t)))
          (values input nil nil)))))

;; (margin "1px 2px 3px 4px")
;; (margin "0 0 1rem")
;; (margin "0 auto")
;; (margin "-0.25rem")

(define-property margin-trim ()
  ()
  (:value :none :in-flow :all))

(define-property padding-top ()
  ()
  (:value .length .percentage :auto))

(define-property padding-right ()
  ()
  (:value .length .percentage :auto))

(define-property padding-bottom ()
  ()
  (:value .length .percentage :auto))

(define-property padding-left ()
  ()
  (:value .length .percentage :auto))

(define-property padding ()
  ()
  (:value .padding))

(define-parser .padding ()
  (lambda (input)
    (multiple-value-bind (rest value match-p)
        (parse (.or (.seq (.or (.length) (.percentage) (.k :auto))
                          (.some (.whitespace))
                          (.or (.length) (.percentage) (.k :auto))
                          (.some (.whitespace))
                          (.or (.length) (.percentage) (.k :auto))
                          (.some (.whitespace))
                          (.or (.length) (.percentage) (.k :auto)))
                    (.seq (.or (.length) (.percentage) (.k :auto))
                          (.some (.whitespace))
                          (.or (.length) (.percentage) (.k :auto))
                          (.some (.whitespace))
                          (.or (.length) (.percentage) (.k :auto)))
                    (.seq (.or (.length) (.percentage) (.k :auto))
                          (.some (.whitespace))
                          (.or (.length) (.percentage) (.k :auto)))
                    (.seq (.or (.length) (.percentage) (.k :auto))))
               input)
      (if match-p
          (case (cl:length value)
            (1 (values rest value t))
            (3 (values rest `(,(first value) ,(third value)) t))
            (5 (values rest `(,(first value) ,(third value) ,(fifth value)) t))
            (7 (values rest `(,(first value) ,(third value) ,(fifth value) ,(seventh value)) t)))
          (values input nil nil)))))
