(in-package :css)

;; https://drafts.csswg.org/css-box-3

(define-property margin-top ()
  ()
  (:value length percentage :auto))

(define-property margin-right ()
  ()
  (:value length percentage :auto))

(define-property margin-bottom ()
  ()
  (:value length percentage :auto))

(define-property margin-left ()
  ()
  (:value length percentage :auto))

(define-parser .margin ()
  (lambda (input)
    (multiple-value-bind (rest value match-p)
        (parse (.or (.seq (.dimension)
                          (.maybe (.some (.whitespace)))
                          (.dimension)
                          (.maybe (.some (.whitespace)))
                          (.dimension)
                          (.maybe (.some (.whitespace)))
                          (.dimension))
                    (.seq (.dimension)
                          (.maybe (.some (.whitespace)))
                          (.dimension)
                          (.maybe (.some (.whitespace)))
                          (.dimension))
                    (.seq (.dimension)
                          (.maybe (.some (.whitespace)))
                          (.dimension))
                    (.n 1 (.dimension)))
               input)
      (if match-p
          (case (cl:length value)
            (1 (values rest value t))
            (3 (values rest `(,(first value) ,(third value)) t))
            (5 (values rest `(,(first value) ,(third value) ,(fifth value)) t))
            (7 (values rest `(,(first value) ,(third value) ,(fifth value) ,(seventh value)) t)))
          (values input nil nil)))))

(defun parse-margin (string)
  (let ((values (nth-value 1 (parse (.margin) string))))
    (case (cl:length values)
      (1 `(,(margin-top (first values))
            ,(margin-right (first values))
            ,(margin-bottom (first values))
            ,(margin-left (first values))))
      (2 `(,(margin-top (first values))
            ,(margin-right (second values))
            ,(margin-bottom (first values))
            ,(margin-left (second values))))
      (3 `(,(margin-top (first values))
            ,(margin-right (second values))
            ,(margin-bottom (third values))
            ,(margin-left (second values))))
      (4 `(,(margin-top (first values))
            ,(margin-right (second values))
            ,(margin-bottom (third values))
            ,(margin-left (fourth values)))))))

(defun margin (&rest values)
  (case (cl:length values)
    (1 (let ((value (first values)))
         (typecase value
           (string (or (parse-margin value)
                       (error "Bad margin value ~S" values)))
           (dimension `(,(margin-top value)
                         ,(margin-right value)
                         ,(margin-bottom value)
                         ,(margin-left value))))))
    (2 `(,(margin-top (first values))
          ,(margin-right (second values))
          ,(margin-bottom (first values))
          ,(margin-left (second values))))
    (3 `(,(margin-top (first values))
          ,(margin-right (second values))
          ,(margin-bottom (third values))
          ,(margin-left (second values))))
    (4 `(,(margin-top (first values))
          ,(margin-right (second values))
          ,(margin-bottom (third values))
          ,(margin-left (fourth values))))))

(define-property margin-trim ()
  ()
  (:value :none :in-flow :all))

(define-property padding-top ()
  ()
  (:value length percentage :auto))

(define-property padding-right ()
  ()
  (:value length percentage :auto))

(define-property padding-bottom ()
  ()
  (:value length percentage :auto))

(define-property padding-left ()
  ()
  (:value length percentage :auto))

(define-parser .padding ()
  (lambda (input)
    (multiple-value-bind (rest value match-p)
        (parse (.or (.seq (.dimension)
                          (.maybe (.some (.whitespace)))
                          (.dimension)
                          (.maybe (.some (.whitespace)))
                          (.dimension)
                          (.maybe (.some (.whitespace)))
                          (.dimension))
                    (.seq (.dimension)
                          (.maybe (.some (.whitespace)))
                          (.dimension)
                          (.maybe (.some (.whitespace)))
                          (.dimension))
                    (.seq (.dimension)
                          (.maybe (.some (.whitespace)))
                          (.dimension))
                    (.n 1 (.dimension)))
               input)
      (if match-p
          (case (cl:length value)
            (1 (values rest value t))
            (3 (values rest `(,(first value) ,(third value)) t))
            (5 (values rest `(,(first value) ,(third value) ,(fifth value)) t))
            (7 (values rest `(,(first value) ,(third value) ,(fifth value) ,(seventh value)) t)))
          (values input nil nil)))))

(defun parse-padding (string)
  (let ((values (nth-value 1 (parse (.padding) string))))
    (case (cl:length values)
      (1 `(,(padding-top (first values))
            ,(padding-right (first values))
            ,(padding-bottom (first values))
            ,(padding-left (first values))))
      (2 `(,(padding-top (first values))
            ,(padding-right (second values))
            ,(padding-bottom (first values))
            ,(padding-left (second values))))
      (3 `(,(padding-top (first values))
            ,(padding-right (second values))
            ,(padding-bottom (third values))
            ,(padding-left (second values))))
      (4 `(,(padding-top (first values))
            ,(padding-right (second values))
            ,(padding-bottom (third values))
            ,(padding-left (fourth values)))))))

(defun padding (&rest values)
  (case (cl:length values)
    (1 (let ((value (first values)))
         (typecase value
           (string (or (parse-padding value)
                       (error "Bad padding value ~S" values)))
           (dimension `(,(padding-top value)
                         ,(padding-right value)
                         ,(padding-bottom value)
                         ,(padding-left value))))))
    (2 `(,(padding-top (first values))
          ,(padding-right (second values))
          ,(padding-bottom (first values))
          ,(padding-left (second values))))
    (3 `(,(padding-top (first values))
          ,(padding-right (second values))
          ,(padding-bottom (third values))
          ,(padding-left (second values))))
    (4 `(,(padding-top (first values))
          ,(padding-right (second values))
          ,(padding-bottom (third values))
          ,(padding-left (fourth values))))))
